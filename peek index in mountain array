An array arr a mountain if the following properties hold:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.

Input: arr = [0,1,0]
Output: 1

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int low=0,high=arr.length-1;
        int mid = (high+low)>>>1;
        if(arr[mid-1]<arr[mid] && arr[mid]>arr[mid+1])
           return mid;
        while(low<=high){
            if(arr[mid-1]<arr[mid] && arr[mid]>arr[mid+1])
               return mid;
            else if(arr[mid-1]<arr[mid] && arr[mid]<arr[mid+1]){
                low=mid;
                mid = (high+low)>>>1; 
            }
            else{
                high=mid;
                mid=(high+low)>>>1;
            }
        }
        return 0;
    }
}
